### This file was generated by Nexus Schema
### Do not make changes to this file directly


"""A character in the Star Wars Trilogy"""
interface Character {
  """Which movies they appear in."""
  appearsIn: [Episode]

  """The friends of the character, or an empty list if they have none."""
  friends: [Character]

  """The id of the character."""
  id: String!

  """The name of the character."""
  name: String

  """All secrets about their past."""
  secretBackstory: String
}

"""A mechanical creature in the Star Wars universe."""
type Droid implements Character {
  """Which movies they appear in."""
  appearsIn: [Episode]

  """The friends of the character, or an empty list if they have none."""
  friends: [Character]

  """The id of the character."""
  id: String!

  """The name of the character."""
  name: String

  """The primary function of the droid."""
  primaryFunction: String

  """All secrets about their past."""
  secretBackstory: String
}

"""One of the films in the Star Wars Trilogy"""
enum Episode {
  """Released in 1980."""
  EMPIRE

  """Released in 1983."""
  JEDI

  """Released in 1977."""
  NEW_HOPE
}

"""A humanoid creature in the Star Wars universe."""
type Human implements Character {
  """Which movies they appear in."""
  appearsIn: [Episode]

  """The friends of the character, or an empty list if they have none."""
  friends: [Character]

  """The home planet of the human, or null if unknown"""
  homePlanet: String

  """The id of the character."""
  id: String!

  """The name of the character."""
  name: String

  """All secrets about their past."""
  secretBackstory: String
}

union HumanOrDroid = Droid | Human

type Query {
  droid(
    """id of the droid"""
    id: String!
  ): Droid
  hero(
    """
    If omitted, returns the hero of the whole saga. If provided, returns the hero of that particular episode.
    """
    episode: Episode
  ): Character
  human(
    """id of the human"""
    id: String!
  ): Human
  humanOrDroid(input: SumInput!): HumanOrDroid
}

input SumInput {
  """An arbitrary integer."""
  one: Int

  """An arbitrary integer."""
  three: Int

  """An arbitrary integer."""
  two: Int
}
