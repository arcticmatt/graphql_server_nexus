/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */







declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  SumInput: { // input type
    one?: number | null; // Int
    three?: number | null; // Int
    two?: number | null; // Int
  }
}

export interface NexusGenEnums {
  Episode: 5 | 6 | 4
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenRootTypes {
  Droid: { // root type
    appearsIn?: Array<NexusGenEnums['Episode'] | null> | null; // [Episode]
    id: string; // String!
    name?: string | null; // String
    primaryFunction?: string | null; // String
  }
  Human: { // root type
    appearsIn?: Array<NexusGenEnums['Episode'] | null> | null; // [Episode]
    homePlanet?: string | null; // String
    id: string; // String!
    name?: string | null; // String
  }
  Query: {};
  Character: NexusGenRootTypes['Droid'] | NexusGenRootTypes['Human'];
  HumanOrDroid: NexusGenRootTypes['Droid'] | NexusGenRootTypes['Human'];
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  SumInput: NexusGenInputs['SumInput'];
  Episode: NexusGenEnums['Episode'];
  String: NexusGenScalars['String'];
  Int: NexusGenScalars['Int'];
  Float: NexusGenScalars['Float'];
  Boolean: NexusGenScalars['Boolean'];
  ID: NexusGenScalars['ID'];
}

export interface NexusGenFieldTypes {
  Droid: { // field return type
    appearsIn: Array<NexusGenEnums['Episode'] | null> | null; // [Episode]
    friends: Array<NexusGenRootTypes['Character'] | null> | null; // [Character]
    id: string; // String!
    name: string | null; // String
    primaryFunction: string | null; // String
    secretBackstory: string | null; // String
  }
  Human: { // field return type
    appearsIn: Array<NexusGenEnums['Episode'] | null> | null; // [Episode]
    friends: Array<NexusGenRootTypes['Character'] | null> | null; // [Character]
    homePlanet: string | null; // String
    id: string; // String!
    name: string | null; // String
    secretBackstory: string | null; // String
  }
  Query: { // field return type
    droid: NexusGenRootTypes['Droid'] | null; // Droid
    hero: NexusGenRootTypes['Character'] | null; // Character
    human: NexusGenRootTypes['Human'] | null; // Human
    humanOrDroid: NexusGenRootTypes['HumanOrDroid'] | null; // HumanOrDroid
  }
  Character: { // field return type
    appearsIn: Array<NexusGenEnums['Episode'] | null> | null; // [Episode]
    friends: Array<NexusGenRootTypes['Character'] | null> | null; // [Character]
    id: string; // String!
    name: string | null; // String
    secretBackstory: string | null; // String
  }
}

export interface NexusGenArgTypes {
  Query: {
    droid: { // args
      id: string; // String!
    }
    hero: { // args
      episode?: NexusGenEnums['Episode'] | null; // Episode
    }
    human: { // args
      id: string; // String!
    }
    humanOrDroid: { // args
      input: NexusGenInputs['SumInput']; // SumInput!
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
  HumanOrDroid: "Droid" | "Human"
  Character: "Droid" | "Human"
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Droid" | "Human" | "Query";

export type NexusGenInputNames = "SumInput";

export type NexusGenEnumNames = "Episode";

export type NexusGenInterfaceNames = "Character";

export type NexusGenScalarNames = "Boolean" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = "HumanOrDroid";

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}